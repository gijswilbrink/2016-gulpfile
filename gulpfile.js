// Init this project
var cms 				= ''; 					// wordpress OR drupal
var domain				= ''; 					// i.e. occhio.nl
var dev_user			= ''; 					// i.e. occhionl
var dev_domain			= domain + '.dev.occhio.nl'; 	// 'dev.' + domain OR domain + '.dev.occhio.nl';

// Environments
var local_domain		= 'local.' + domain;
var dev_path			= dev_user + '@' + dev_domain + ':/var/www/vhosts/' + domain + '/httpdocs';

// Load modules
var source 				= require('vinyl-source-stream');
var transform 			= require('vinyl-transform');
var gulp 				= require('gulp');
var gutil 				= require('gulp-util');
var browserify 			= require('browserify');
var babelify 			= require('babelify');
var watchify 			= require('watchify');
var notify 				= require('gulp-notify');
var del 				= require('del');
var flatten 			= require('gulp-flatten');
var header 				= require('gulp-header');
var	rename 				= require('gulp-rename');
var rsync 				= require('rsyncwrapper').rsync;
var plumber				= require('gulp-plumber');
var sourcemaps 			= require('gulp-sourcemaps');
var	sass 				= require('gulp-sass');
var	sassGlob 			= require('gulp-sass-glob-import');
var urlAdjuster 		= require('gulp-css-url-adjuster');
var	autoprefixer 		= require('gulp-autoprefixer');
var	concat 				= require('gulp-concat');
var	uglify 				= require('gulp-uglify');
var imagemin 			= require('gulp-imagemin');
var svgmin 				= require('gulp-svgmin');
var taskListing 		= require('gulp-task-listing');
var buffer 				= require('vinyl-buffer');
var historyApiFallback 	= require('connect-history-api-fallback');
var	browserSync 		= require('browser-sync');
var reload 				= browserSync.reload;

/*----------------------------------------------------*/

/**
 * Paths to project folders
 */
var paths = {
	all: {
		input: 'src/**/*',
		output: 'dist/'
	},
	scripts_app: {
		input: 	'src/js/**/*.*',
		output: 'dist/js/'
	},
	scripts_vendor: {
		input: 	'src/js/vendor/**/*.js',
		output: 'dist/js/'
	},
	scripts_admin: {
		input: 	'src/js/admin/**/*.js',
		output: 'dist/js/'
	},
	styles: {
		input: 	'src/sass/**/*.{scss,sass}',
		output: 'dist/css/'
	},
	fonts: {
		input: 	'src/fonts/**/*',
		output: 'dist/fonts/'
	},
	svgs: {
		input: 	'src/svg/*',
		output: 'dist/svg/'
	},
	images: {
		input: 	'src/img/*',
		output: 'dist/img/'
	},
	cmsImages: {
		input: '../../uploads/**/*',
		backup:'../../uploads/backup-uploads/',
		output:'../../uploads/**/*'
	},
	php: {
		input: '**/*.php'
	}
};


/**
 * Template for banner to add to file headers
 * One for CSS and one for JS
 */
var banner = {
	full :
		'/*!\n' +
		" * DON'T EDIT THIS FILE!\n" +
		' * Generated by Gulp on ' + new Date().getFullYear() + '\n' +
		' * Occhio web developers\n' +
		' * http://www.occhio.nl/\n' +
		' * info@occhio.nl\n' +
		' * +31 (0)20 320 78 70\n\n' +
		' * http://www.occhio.nl/over-occhio/vacatures/' +
		' */\n\n'
};


/**
 * Create clean: tasks
 * These tasks remove pre-existing content from output folders specific to the folder that will be created
 */
for(var type in paths) {
	var oPath = paths[type];
	// only get the output paths
	if(typeof oPath == 'object' && typeof oPath.output != 'undefined') {
		// create task like clean:all, clean:images, etc
		gulp.task('clean:' + type, function () {
			return del.sync(oPath.output);
		});
	}
}

/**
 * backup uploads
 */
gulp.task('backup:uploads', function () {
	return gulp.src(paths.cmsImages.input)
		.pipe(gulp.dest(paths.cmsImages.backup))
});


/**
 * 	Compress images
 */
gulp.task('build:images', ['clean:images'], function() {
	return gulp.src(paths.images.input)
//		.pipe(imagemin())
		.pipe(gulp.dest(paths.images.output))
});

/**
 * 	Compress fonts
 */
gulp.task('build:fonts', ['clean:fonts'], function() {
	return gulp.src(paths.fonts.input)
//		TODO
		.pipe(gulp.dest(paths.fonts.output))
});

// specific for Wordpress (if you're using Drupal Change the path)
gulp.task('cms:images', ['backup:uploads'], function() {
	return gulp.src(paths.cmsImages.input)
		// .pipe(imagemin())
		// .pipe(gulp.dest(paths.cmsImages.output))
});

/**
 *  Compress SVG and Generate Sprites
 */
gulp.task('build:svgs', ['clean:svgs'], function () {
	return gulp.src(paths.svgs.input)
		.pipe(svgmin())
		.pipe(gulp.dest(paths.svgs.output))
});

/**
 * JS helper functions 
 */
function handleErrors() {
	var args = Array.prototype.slice.call(arguments);
	notify.onError({
		title: 'Compile Error',
		message: '<%= error.message %>'
	}).apply(this, args);
	this.emit('end'); // Keep gulp from hanging on this task
}

/**
 * Bundle and compress vendor and admin JS files
 */
gulp.task('build:scripts', ['clean:scripts_vendor', 'clean:scripts_admin'], function() {

	// array of scripts that should be generated
	var aScripts = [{
		// vendor.js
		filename: 'vendor.js',
		srcDir: [paths.scripts_vendor.input],
		destDir: paths.scripts_vendor.output,
	}, {
		// admin.js
		filename: 'admin.js',
		srcDir: [paths.scripts_admin.input],
		destDir: paths.scripts_admin.output,
	}];

	// loop scripts and run normal js tasks
	for(var i = 0; i < aScripts.length; i++) {
		// init script paths
		var oScript = aScripts[i];

		gulp.src(oScript.srcDir)
			// combine
			.pipe(plumber())
			.pipe(sourcemaps.init()) 			// init source maps
			.pipe(concat(oScript.filename)) 	// combine files
			.pipe(header(banner.full)) 			// add occhio header to combined file
			.pipe(gulp.dest(oScript.destDir)) 	// save combined file
			// minify
      		.pipe(rename({ suffix: '.min' })) 	// add .min postfix
			.pipe(uglify()) 					// minify
			.pipe(sourcemaps.write("./")) 		// end sourcemap watch
			.pipe(gulp.dest(oScript.destDir)) 	// save minified version*/
    }

    browserSync.reload();
});

/**
 * Build the app.js with browserify
 */
gulp.task('build:appjs', ['clean:scripts_app'], function() {
	var sourceFile = 'src/js/app.js';

    // run browserify and babel on app.js
    var props = {
		entries: [sourceFile],
		debug : true,
		cache: {},
		packageCache: {},
		extensions: ['.jsx'],
		transform:  [babelify.configure({
			presets: ["es2015", "react"]
		})]
	};
    	
    // run browserify for main app.js
	return browserify(props).bundle()
		.on('error', handleErrors)
		.pipe(source('app.js'))
		.pipe(gulp.dest(paths.scripts_app.output)) 	// save bundled file
  		/*
  		// minify
  		.pipe(buffer())						
  		.pipe(rename({ suffix: '.min' })) 	// add .min postfix
		.pipe(uglify()) 					// minify
		.pipe(gulp.dest(paths.scripts_app.output)) 	// save minified version*/
		.pipe(reload({stream:true}))
});


/**
 *  Browser sync
 */
gulp.task('serve', function() {
	browserSync.init({
		middleware : [ historyApiFallback() ]
	});
});

/**
 * Process, lint, and minify Sass files
 * @todo sourcemaps breekt browsersync stream
 * @todo op het laatst pas oude CSS weggooien
 */
gulp.task('build:styles', ['clean:styles'], function() {
	return gulp.src(paths.styles.input)
		.pipe(plumber())
		.pipe(sourcemaps.init())
		.pipe(sassGlob())
		.pipe(sass({
			outputStyle: 'expanded',
			sourceComments: true
		}))
		.pipe(flatten())
		.pipe(autoprefixer({
			browsers: ['> 1%', 'last 3 versions']
		}))
		.pipe(urlAdjuster({
			prependRelative: '../img/',
			append: '?version=' + Date.now()
		}))
		.pipe(sourcemaps.write("./"))
		.pipe(gulp.dest(paths.styles.output))
		.pipe(reload({stream:true}));
});

/**
 * Build PHP
 */
gulp.task('build:php', function() {
	return browserSync.reload();
});

/************************************************
 * RSYNC
 ************************************************/

/**
 * Create sync paths
 */
if(cms == 'wordpress') {
	var syncPaths = {
		uploads: {
			'local' : '../../uploads/',
			'dev' : dev_path + '/wp-content/uploads/',
		},
		plugins: {
			'local' : '../../plugins/',
			'dev' : dev_path + '/wp-content/plugins/',
		},
		parentTheme: {
			'local' : '../occhio/',
			'dev' : dev_path + '/wp-content/themes/occhio/',
		}
	};
} else if(cms == 'drupal') {
	var syncPaths = {
		uploads: {
			'local' : '../../../default/files/',
			'dev' : dev_path + '/sites/default/files/'
		},
		modules: {
			'local' : '../../modules/',
			'dev' : dev_path + '/sites/all/modules/'
		}
	};
}

/**
 * Default rsync settings
 */
var rsyncSettings = {
	ssh: true,
	recursive: true,
	syncDest: true,
	args: ['--verbose']
}
var rsyncCallback = function(error, stdout, stderr, cmd) {
	console.log(stdout);
};

/**
 * loop all sync paths and create gulp tasks
 * call these like:
 * gulp sync:uploads
 * gulp sync:plugins (for wordpress)
 * gulp sync:modules (for drupal)
 * etc
 */
for(var key in syncPaths) {
	// dev to local
	gulp.task('sync:' + key, function() {
		var currentKey = this.seq[0].substr(this.seq[0].indexOf(':') + 1);
		rsyncSettings.src = syncPaths[currentKey].dev;
		rsyncSettings.dest = syncPaths[currentKey].local;
		console.log(rsyncSettings);
		rsync(rsyncSettings, rsyncCallback);
	});
}

/************************************************
 * MAIN TASKS
 ************************************************/

/**
 * Watch all
 */
gulp.task('watch', function() {
	gulp.watch(paths.php.input,		['build:php']);
	gulp.watch(paths.styles.input,	['build:styles']);
	gulp.watch(paths.scripts_vendor.input,	['build:scripts']);
	gulp.watch(paths.scripts_app.input,	['build:appjs']);
	gulp.watch(paths.scripts_admin.input,	['build:scripts']);
	gulp.watch(paths.svgs.input,	['build:svgs']);
	gulp.watch(paths.images.input,	['build:images']);
});

/**
 * Build all
 */
gulp.task('build', ['build:php','build:styles','build:scripts', 'build:appjs', 'build:svgs','build:images', 'build:fonts']);

/**
 * Build all and watch task at the beginning
 */
gulp.task('default', ['build', 'watch', 'serve']);

/**
 * Call gulp help to view all possible tasks of this gulp file
 */
gulp.task('help', taskListing);